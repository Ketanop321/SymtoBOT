{"ast":null,"code":"var _jsxFileName = \"E:\\\\Symptom-Checker-Site\\\\src\\\\components\\\\Diagnosis.js\";\n// components/Diagnosis.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Diagnosis.css';\nimport { v4 as uuid } from \"uuid\";\nconst Diagnosis = props => {\n  const [conditions, setConditions] = useState([]);\n  useEffect(() => {\n    const fetchDiagnosis = async () => {\n      const patientData = {\n        sex: props.sex,\n        age: {\n          value: parseInt(props.age, 10)\n        },\n        evidence: props.symptomStatus.map((status, index) => ({\n          id: `s_${index + 1}`,\n          choice_id: status,\n          source: \"initial\"\n        }))\n      };\n      const options = {\n        url: 'https://api.infermedica.com/v3/diagnosis',\n        method: 'POST',\n        headers: {\n          'App-Id': 'aa2fb846',\n          'App-Key': '150bc1e17a9a86a6c21f7e0f4cfa9d41',\n          'Content-Type': 'application/json'\n        },\n        data: JSON.stringify(patientData)\n      };\n      try {\n        const response = await axios.request(options);\n        setConditions(response.data.conditions);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchDiagnosis();\n  }, [props.sex, props.age, props.symptomStatus]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Diagnosis\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, \"Potential Diagnosis:\"), conditions.map(m => /*#__PURE__*/React.createElement(\"h1\", {\n    key: uuid(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, m.name)));\n};\nexport default Diagnosis;","map":{"version":3,"names":["React","useState","useEffect","axios","v4","uuid","Diagnosis","props","conditions","setConditions","fetchDiagnosis","patientData","sex","age","value","parseInt","evidence","symptomStatus","map","status","index","id","choice_id","source","options","url","method","headers","data","JSON","stringify","response","request","error","console","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","m","key","name"],"sources":["E:/Symptom-Checker-Site/src/components/Diagnosis.js"],"sourcesContent":["// components/Diagnosis.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './Diagnosis.css';\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst Diagnosis = (props) => {\r\n  const [conditions, setConditions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchDiagnosis = async () => {\r\n      const patientData = {\r\n        sex: props.sex,\r\n        age: {\r\n          value: parseInt(props.age, 10),\r\n        },\r\n        evidence: props.symptomStatus.map((status, index) => ({\r\n          id: `s_${index + 1}`,\r\n          choice_id: status,\r\n          source: \"initial\"\r\n        })),\r\n      };\r\n\r\n      const options = {\r\n        url: 'https://api.infermedica.com/v3/diagnosis',\r\n        method: 'POST',\r\n        headers: {\r\n          'App-Id': 'aa2fb846',\r\n          'App-Key': '150bc1e17a9a86a6c21f7e0f4cfa9d41',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        data: JSON.stringify(patientData),\r\n      };\r\n\r\n      try {\r\n        const response = await axios.request(options);\r\n        setConditions(response.data.conditions);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    fetchDiagnosis();\r\n  }, [props.sex, props.age, props.symptomStatus]);\r\n\r\n  return (\r\n    <div className='Diagnosis'>\r\n      <h1>Potential Diagnosis:</h1>\r\n      {conditions.map((m) => (\r\n        <h1 key={uuid()}>{m.name}</h1>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Diagnosis;\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,iBAAiB;AACxB,SAASC,EAAE,IAAIC,IAAI,QAAQ,MAAM;AAEjC,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAC3B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMQ,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,MAAMC,WAAW,GAAG;QAClBC,GAAG,EAAEL,KAAK,CAACK,GAAG;QACdC,GAAG,EAAE;UACHC,KAAK,EAAEC,QAAQ,CAACR,KAAK,CAACM,GAAG,EAAE,EAAE;QAC/B,CAAC;QACDG,QAAQ,EAAET,KAAK,CAACU,aAAa,CAACC,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,MAAM;UACpDC,EAAE,EAAE,KAAKD,KAAK,GAAG,CAAC,EAAE;UACpBE,SAAS,EAAEH,MAAM;UACjBI,MAAM,EAAE;QACV,CAAC,CAAC;MACJ,CAAC;MAED,MAAMC,OAAO,GAAG;QACdC,GAAG,EAAE,0CAA0C;QAC/CC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,QAAQ,EAAE,UAAU;UACpB,SAAS,EAAE,kCAAkC;UAC7C,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACnB,WAAW;MAClC,CAAC;MAED,IAAI;QACF,MAAMoB,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,OAAO,CAACR,OAAO,CAAC;QAC7Cf,aAAa,CAACsB,QAAQ,CAACH,IAAI,CAACpB,UAAU,CAAC;MACzC,CAAC,CAAC,OAAOyB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAEDvB,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACH,KAAK,CAACK,GAAG,EAAEL,KAAK,CAACM,GAAG,EAAEN,KAAK,CAACU,aAAa,CAAC,CAAC;EAE/C,oBACEjB,KAAA,CAAAmC,aAAA;IAAKC,SAAS,EAAC,WAAW;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACxB1C,KAAA,CAAAmC,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,sBAAwB,CAAC,EAC5BlC,UAAU,CAACU,GAAG,CAAEyB,CAAC,iBAChB3C,KAAA,CAAAmC,aAAA;IAAIS,GAAG,EAAEvC,IAAI,CAAC,CAAE;IAAAgC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAEC,CAAC,CAACE,IAAS,CAC9B,CACE,CAAC;AAEV,CAAC;AAED,eAAevC,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module"}