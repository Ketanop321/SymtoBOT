{"ast":null,"code":"var _jsxFileName = \"E:\\\\symtobot\\\\src\\\\components\\\\Diagnosis.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Diagnosis.css';\nimport { v4 as uuid } from \"uuid\";\n\n// Load environment variables (this won't be needed in React as React automatically picks env variables prefixed with REACT_APP_)\n// require('dotenv').config(); // This is for Node.js environments\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Diagnosis = props => {\n  _s();\n  const [conditions, setConditions] = useState([]);\n  useEffect(() => {\n    const fetchDiagnosis = async () => {\n      const patientData = {\n        sex: props.sex,\n        age: {\n          value: parseInt(props.age, 10)\n        },\n        evidence: [{\n          id: \"s_21\",\n          choice_id: props.symptomStatus[0],\n          source: \"initial\"\n        }, {\n          id: \"s_120\",\n          choice_id: props.symptomStatus[1]\n        }, {\n          id: \"s_1190\",\n          choice_id: props.symptomStatus[2]\n        }, {\n          id: \"s_50\",\n          choice_id: props.symptomStatus[3]\n        }, {\n          id: \"s_169\",\n          choice_id: props.symptomStatus[4]\n        }, {\n          id: \"s_8\",\n          choice_id: props.symptomStatus[5]\n        }, {\n          id: \"s_370\",\n          choice_id: props.symptomStatus[6]\n        }, {\n          id: \"s_121\",\n          choice_id: props.symptomStatus[7]\n        }, {\n          id: \"s_417\",\n          choice_id: props.symptomStatus[8]\n        }, {\n          id: \"s_492\",\n          choice_id: props.symptomStatus[9]\n        }, {\n          id: \"s_715\",\n          choice_id: props.symptomStatus[10]\n        }, {\n          id: \"s_67\",\n          choice_id: props.symptomStatus[11]\n        }, {\n          id: \"s_418\",\n          choice_id: props.symptomStatus[12]\n        }, {\n          id: \"s_1165\",\n          choice_id: props.symptomStatus[13]\n        }, {\n          id: \"s_226\",\n          choice_id: props.symptomStatus[14]\n        }, {\n          id: \"s_551\",\n          choice_id: props.symptomStatus[15]\n        }, {\n          id: \"s_102\",\n          choice_id: props.symptomStatus[16]\n        }, {\n          id: \"s_98\",\n          choice_id: props.symptomStatus[17]\n        }, {\n          id: \"s_1429\",\n          choice_id: props.symptomStatus[18]\n        }, {\n          id: \"s_81\",\n          choice_id: props.symptomStatus[19]\n        }, {\n          id: \"s_216\",\n          choice_id: props.symptomStatus[20]\n        }, {\n          id: \"s_156\",\n          choice_id: props.symptomStatus[21]\n        }, {\n          id: \"s_305\",\n          choice_id: props.symptomStatus[22]\n        }, {\n          id: \"s_2100\",\n          choice_id: props.symptomStatus[23]\n        }, {\n          id: \"s_1295\",\n          choice_id: props.symptomStatus[24]\n        }]\n      };\n      const options = {\n        url: 'https://api.infermedica.com/v3/diagnosis',\n        method: 'POST',\n        headers: {\n          'App-Id': process.env.REACT_APP_API_ID,\n          // Use environment variables\n          'App-Key': process.env.REACT_APP_API_KEY,\n          // Use environment variables\n          'Content-Type': 'application/json'\n        },\n        data: JSON.stringify(patientData)\n      };\n      try {\n        const response = await axios.request(options);\n        console.log(response.data.conditions);\n        setConditions(response.data.conditions);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchDiagnosis();\n  }, [props.sex, props.age, props.symptomStatus]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Diagnosis\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Potential Diagnosis:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), conditions.map(m => /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: m.name\n    }, uuid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(Diagnosis, \"QnXjvDdOKjdD2PqOOwl8x9hzEyo=\");\n_c = Diagnosis;\nexport default Diagnosis;\nvar _c;\n$RefreshReg$(_c, \"Diagnosis\");","map":{"version":3,"names":["React","useState","useEffect","axios","v4","uuid","jsxDEV","_jsxDEV","Diagnosis","props","_s","conditions","setConditions","fetchDiagnosis","patientData","sex","age","value","parseInt","evidence","id","choice_id","symptomStatus","source","options","url","method","headers","process","env","REACT_APP_API_ID","REACT_APP_API_KEY","data","JSON","stringify","response","request","console","log","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","m","name","_c","$RefreshReg$"],"sources":["E:/symtobot/src/components/Diagnosis.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './Diagnosis.css';\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\n// Load environment variables (this won't be needed in React as React automatically picks env variables prefixed with REACT_APP_)\r\n// require('dotenv').config(); // This is for Node.js environments\r\n\r\nconst Diagnosis = (props) => {\r\n  const [conditions, setConditions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchDiagnosis = async () => {\r\n      const patientData = {\r\n        sex: props.sex,\r\n        age: {\r\n          value: parseInt(props.age, 10),\r\n        },\r\n        evidence: [\r\n          { id: \"s_21\", choice_id: props.symptomStatus[0], source: \"initial\" },\r\n          { id: \"s_120\", choice_id: props.symptomStatus[1] },\r\n          { id: \"s_1190\", choice_id: props.symptomStatus[2] },\r\n          { id: \"s_50\", choice_id: props.symptomStatus[3] },\r\n          { id: \"s_169\", choice_id: props.symptomStatus[4] },\r\n          { id: \"s_8\", choice_id: props.symptomStatus[5] },\r\n          { id: \"s_370\", choice_id: props.symptomStatus[6] },\r\n          { id: \"s_121\", choice_id: props.symptomStatus[7] },\r\n          { id: \"s_417\", choice_id: props.symptomStatus[8] },\r\n          { id: \"s_492\", choice_id: props.symptomStatus[9] },\r\n          { id: \"s_715\", choice_id: props.symptomStatus[10] },\r\n          { id: \"s_67\", choice_id: props.symptomStatus[11] },\r\n          { id: \"s_418\", choice_id: props.symptomStatus[12] },\r\n          { id: \"s_1165\", choice_id: props.symptomStatus[13] },\r\n          { id: \"s_226\", choice_id: props.symptomStatus[14] },\r\n          { id: \"s_551\", choice_id: props.symptomStatus[15] },\r\n          { id: \"s_102\", choice_id: props.symptomStatus[16] },\r\n          { id: \"s_98\", choice_id: props.symptomStatus[17] },\r\n          { id: \"s_1429\", choice_id: props.symptomStatus[18] },\r\n          { id: \"s_81\", choice_id: props.symptomStatus[19] },\r\n          { id: \"s_216\", choice_id: props.symptomStatus[20] },\r\n          { id: \"s_156\", choice_id: props.symptomStatus[21] },\r\n          { id: \"s_305\", choice_id: props.symptomStatus[22] },\r\n          { id: \"s_2100\", choice_id: props.symptomStatus[23] },\r\n          { id: \"s_1295\", choice_id: props.symptomStatus[24] },\r\n        ],\r\n      };\r\n\r\n      const options = {\r\n        url: 'https://api.infermedica.com/v3/diagnosis',\r\n        method: 'POST',\r\n        headers: {\r\n          'App-Id': process.env.REACT_APP_API_ID,  // Use environment variables\r\n          'App-Key': process.env.REACT_APP_API_KEY,  // Use environment variables\r\n          'Content-Type': 'application/json',\r\n        },\r\n        data: JSON.stringify(patientData),\r\n      };\r\n\r\n      try {\r\n        const response = await axios.request(options);\r\n        console.log(response.data.conditions);\r\n        setConditions(response.data.conditions);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    fetchDiagnosis();\r\n  }, [props.sex, props.age, props.symptomStatus]);\r\n\r\n  return (\r\n    <div className='Diagnosis'>\r\n      <h1>Potential Diagnosis:</h1>\r\n      {conditions.map((m) => (\r\n        <h1 key={uuid()}>{m.name}</h1>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Diagnosis;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,iBAAiB;AACxB,SAASC,EAAE,IAAIC,IAAI,QAAQ,MAAM;;AAEjC;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC3B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMW,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,MAAMC,WAAW,GAAG;QAClBC,GAAG,EAAEN,KAAK,CAACM,GAAG;QACdC,GAAG,EAAE;UACHC,KAAK,EAAEC,QAAQ,CAACT,KAAK,CAACO,GAAG,EAAE,EAAE;QAC/B,CAAC;QACDG,QAAQ,EAAE,CACR;UAAEC,EAAE,EAAE,MAAM;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,CAAC,CAAC;UAAEC,MAAM,EAAE;QAAU,CAAC,EACpE;UAAEH,EAAE,EAAE,OAAO;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,CAAC;QAAE,CAAC,EAClD;UAAEF,EAAE,EAAE,QAAQ;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,CAAC;QAAE,CAAC,EACnD;UAAEF,EAAE,EAAE,MAAM;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,CAAC;QAAE,CAAC,EACjD;UAAEF,EAAE,EAAE,OAAO;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,CAAC;QAAE,CAAC,EAClD;UAAEF,EAAE,EAAE,KAAK;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,CAAC;QAAE,CAAC,EAChD;UAAEF,EAAE,EAAE,OAAO;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,CAAC;QAAE,CAAC,EAClD;UAAEF,EAAE,EAAE,OAAO;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,CAAC;QAAE,CAAC,EAClD;UAAEF,EAAE,EAAE,OAAO;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,CAAC;QAAE,CAAC,EAClD;UAAEF,EAAE,EAAE,OAAO;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,CAAC;QAAE,CAAC,EAClD;UAAEF,EAAE,EAAE,OAAO;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,EAAE;QAAE,CAAC,EACnD;UAAEF,EAAE,EAAE,MAAM;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,EAAE;QAAE,CAAC,EAClD;UAAEF,EAAE,EAAE,OAAO;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,EAAE;QAAE,CAAC,EACnD;UAAEF,EAAE,EAAE,QAAQ;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,EAAE;QAAE,CAAC,EACpD;UAAEF,EAAE,EAAE,OAAO;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,EAAE;QAAE,CAAC,EACnD;UAAEF,EAAE,EAAE,OAAO;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,EAAE;QAAE,CAAC,EACnD;UAAEF,EAAE,EAAE,OAAO;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,EAAE;QAAE,CAAC,EACnD;UAAEF,EAAE,EAAE,MAAM;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,EAAE;QAAE,CAAC,EAClD;UAAEF,EAAE,EAAE,QAAQ;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,EAAE;QAAE,CAAC,EACpD;UAAEF,EAAE,EAAE,MAAM;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,EAAE;QAAE,CAAC,EAClD;UAAEF,EAAE,EAAE,OAAO;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,EAAE;QAAE,CAAC,EACnD;UAAEF,EAAE,EAAE,OAAO;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,EAAE;QAAE,CAAC,EACnD;UAAEF,EAAE,EAAE,OAAO;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,EAAE;QAAE,CAAC,EACnD;UAAEF,EAAE,EAAE,QAAQ;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,EAAE;QAAE,CAAC,EACpD;UAAEF,EAAE,EAAE,QAAQ;UAAEC,SAAS,EAAEZ,KAAK,CAACa,aAAa,CAAC,EAAE;QAAE,CAAC;MAExD,CAAC;MAED,MAAME,OAAO,GAAG;QACdC,GAAG,EAAE,0CAA0C;QAC/CC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,QAAQ,EAAEC,OAAO,CAACC,GAAG,CAACC,gBAAgB;UAAG;UACzC,SAAS,EAAEF,OAAO,CAACC,GAAG,CAACE,iBAAiB;UAAG;UAC3C,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACpB,WAAW;MAClC,CAAC;MAED,IAAI;QACF,MAAMqB,QAAQ,GAAG,MAAMhC,KAAK,CAACiC,OAAO,CAACZ,OAAO,CAAC;QAC7Ca,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACH,IAAI,CAACrB,UAAU,CAAC;QACrCC,aAAa,CAACuB,QAAQ,CAACH,IAAI,CAACrB,UAAU,CAAC;MACzC,CAAC,CAAC,OAAO4B,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAED1B,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACJ,KAAK,CAACM,GAAG,EAAEN,KAAK,CAACO,GAAG,EAAEP,KAAK,CAACa,aAAa,CAAC,CAAC;EAE/C,oBACEf,OAAA;IAAKiC,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBlC,OAAA;MAAAkC,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC5BlC,UAAU,CAACmC,GAAG,CAAEC,CAAC,iBAChBxC,OAAA;MAAAkC,QAAA,EAAkBM,CAAC,CAACC;IAAI,GAAf3C,IAAI,CAAC,CAAC;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAc,CAC9B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACnC,EAAA,CAtEIF,SAAS;AAAAyC,EAAA,GAATzC,SAAS;AAwEf,eAAeA,SAAS;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}